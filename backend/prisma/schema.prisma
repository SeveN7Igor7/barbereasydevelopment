// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PlanoTipo {
  TRIAL
  STANDARD
  PAGO
  VITALICIO
  CLOSED
}

enum DiaSemana {
  DOMINGO
  SEGUNDA
  TERCA
  QUARTA
  QUINTA
  SEXTA
  SABADO
}

enum StatusConta {
  ATIVA
  INATIVA
}

enum StatusAgendamento {
  AGENDAMENTO_PROGRAMADO
  ATENDIDO
  CANCELADO
}

enum StatusPagamento {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

model Barbearia {
  id               Int      @id @default(autoincrement())
  nome             String
  nomeProprietario String
  nomeUrl          String   @unique
  plano            PlanoTipo @default(TRIAL)
  logoUrl          String?
  bannerUrl        String?
  ativa            Boolean  @default(true)
  createdAt        DateTime @default(now())
  email            String   @unique
  senha            String
  telefone         String?

  // Relacionamentos
  barbeiros        Barbeiro[]
  horarios         Horario[]
  servicos         Servico[]
  clientes         Cliente[]
  agendamentos     Agendamento[]
  pagamentos       Pagamento[]
}

model Barbeiro {
  id           Int      @id @default(autoincrement())
  nome         String
  especialidade String?
  ativo        Boolean  @default(true)
  barbeariaId  Int

  // Relacionamentos
  barbearia    Barbearia @relation(fields: [barbeariaId], references: [id])
  agendamentos Agendamento[]
}

model Horario {
  id          Int       @id @default(autoincrement())
  diaSemana   DiaSemana
  horaInicio  String
  horaFim     String
  barbeariaId Int

  // Relacionamentos
  barbearia   Barbearia @relation(fields: [barbeariaId], references: [id])
}

model Servico {
  id          Int    @id @default(autoincrement())
  nome        String
  duracaoMin  Int
  preco       Float
  barbeariaId Int

  // Relacionamentos
  barbearia   Barbearia @relation(fields: [barbeariaId], references: [id])
}

model Cliente {
  id          Int         @id @default(autoincrement())
  nome        String
  telefone    String
  status      StatusConta @default(ATIVA)
  barbeariaId Int

  // Relacionamentos
  barbearia    Barbearia @relation(fields: [barbeariaId], references: [id])
  agendamentos Agendamento[]
}

model Agendamento {
  id           Int               @id @default(autoincrement())
  dataHora     DateTime
  status       StatusAgendamento @default(AGENDAMENTO_PROGRAMADO)
  clienteId    Int
  barbeiroId   Int
  barbeariaId  Int
  nomeServico  String
  precoServico Float

  // Relacionamentos
  cliente      Cliente   @relation(fields: [clienteId], references: [id])
  barbeiro     Barbeiro  @relation(fields: [barbeiroId], references: [id])
  barbearia    Barbearia @relation(fields: [barbeariaId], references: [id])
}

model ConversaIA {
  id        Int      @id @default(autoincrement())
  telefone  String
  mensagem  String
  tipo      String   // 'USER' ou 'AI'
  sessao    String?  // JSON da sessão do usuário
  createdAt DateTime @default(now())
}

model Pagamento {
  id            Int           @id @default(autoincrement())
  barbeariaId   Int
  mercadoPagoId String        @unique
  valor         Float
  status        StatusPagamento
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  barbearia     Barbearia     @relation(fields: [barbeariaId], references: [id])
}


